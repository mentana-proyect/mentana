"use client";
import { useState, useEffect } from "react";
import { supabase } from "../../../lib/supabaseClient";
import "../../../styles/general.css";
import Footer from "../../../components/Footer";

interface Gad7FormProps {
  onComplete?: () => void;
  onResult?: (score: number, interpretation: string) => void;
}

const gad7Questions = [
  "1. ¬øTe has sentido nervioso/a, ansioso/a o al borde?",
  "2. ¬øTe has preocupado demasiado por diferentes cosas?",
  "3. ¬øTe ha costado relajarte?",
  "4. ¬øTe has sentido inquieto/a o incapaz de quedarse quieto/a?",
  "5. ¬øTe has sentido f√°cilmente irritable?",
  "6. ¬øHas tenido miedo de que algo terrible pudiera pasar?",
  "7. ¬øHas sentido que tu respiraci√≥n se acelera sin raz√≥n aparente?",
  "8. ¬øHas evitado situaciones por miedo a sentir ansiedad?",
];

const options = [
  { label: "0", value: 0 },
  { label: "1", value: 1 },
  { label: "2", value: 2 },
  { label: "3", value: 3 },
];

export default function Gad7Form({ onComplete, onResult }: Gad7FormProps) {
  const [answers, setAnswers] = useState<number[]>(Array(gad7Questions.length).fill(-1));
  const [loading, setLoading] = useState(false);
  const [canAnswer, setCanAnswer] = useState(true);
  const quizId = "ansiedad1"; // üëà identificador √∫nico del quiz

  const handleAnswer = (index: number, value: number) => {
    const updated = [...answers];
    updated[index] = value;
    setAnswers(updated);
  };

  const getInterpretation = (score: number) => {
    if (score <= 4) return "La ansiedad es baja. Probablemente no se requiere intervenci√≥n cl√≠nica.";
    if (score <= 9) return "S√≠ntomas leves de ansiedad. Observar si afectan la vida diaria.";
    if (score <= 14) return "S√≠ntomas moderados. Considerar evaluaci√≥n profesional.";
    return "Alta ansiedad. Se recomienda apoyo profesional.";
  };

  // üïí Verificar si el usuario puede volver a responder
  useEffect(() => {
    const checkLastAttempt = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      const userId = user?.id;
      if (!userId) return;

      const { data, error } = await supabase
        .from("quiz_progress")
        .select("last_completed_at")
        .eq("user_id", userId)
        .eq("quiz_id", quizId)
        .single();

      if (error) return; // no existe ‚Üí puede responder

      if (data?.last_completed_at) {
        const lastDate = new Date(data.last_completed_at);
        const now = new Date();
        const diffDays = (now.getTime() - lastDate.getTime()) / (1000 * 60 * 60 * 24);
        if (diffDays < 30) {
          setCanAnswer(false);
        }
      }
    };

    checkLastAttempt();
  }, []);

  const calculateScore = async () => {
    if (answers.includes(-1)) {
      alert("Por favor responde todas las preguntas antes de continuar.");
      return;
    }

    if (!canAnswer) {
      alert("‚è≥ Solo puedes volver a responder este test despu√©s de 30 d√≠as.");
      return;
    }

    const total = answers.reduce((acc, val) => acc + val, 0);
    const interpretation = getInterpretation(total);

    setLoading(true);
    const { data: { user } } = await supabase.auth.getUser();
    const userId = user?.id;
    if (!userId) {
      alert("‚ö†Ô∏è Usuario no autenticado.");
      setLoading(false);
      return;
    }

    // ‚úÖ 1. Guardar resultado hist√≥rico
    const { error: insertError } = await supabase.from("results_ansiedad").insert([
      { user_id: userId, answers, score: total, interpretation },
    ]);

    if (insertError) {
      console.error(insertError);
      alert("Error al guardar resultado.");
      setLoading(false);
      return;
    }

    // ‚úÖ 2. Actualizar progreso general (upsert evita duplicados)
    const { error: progressError } = await supabase
      .from("quiz_progress")
      .upsert(
        {
          user_id: userId,
          quiz_id: quizId,
          completed: true,
          unlocked: true,
          score: total,
          interpretation,
          last_completed_at: new Date().toISOString(),
        },
        { onConflict: "user_id,quiz_id" }
      );

    if (progressError) {
      console.error(progressError);
      alert("Error al actualizar el progreso del quiz.");
      setLoading(false);
      return;
    }

    setLoading(false);
    if (onResult) onResult(total, interpretation);
    if (onComplete) onComplete();
    alert("‚úÖ Resultado guardado correctamente.");
  };

  return (
    <div className="page">
      <div className="fixed-header-container">
        <h1 className="text-2xl font-bold mb-6">Cuestionario GAD-7</h1>
        <small>
          <i>
            Donde 0 es &quot;Nunca&quot;, 1 es &quot;Varios d√≠as&quot;, 2 es &quot;M√°s de la mitad de los d√≠as&quot; y 3 es &quot;Casi todos los d√≠as&quot;.
          </i>
        </small>
      </div>

      {!canAnswer ? (
        <p className="text-center text-red-500 font-medium mt-4">
          ‚è≥ Ya completaste este cuestionario hace menos de 30 d√≠as.
          Podr√°s volver a responderlo m√°s adelante.
        </p>
      ) : (
        <>
          <form>
            {gad7Questions.map((q, i) => (
              <div key={i} className="form-group full-width">
                <p className="font-medium mb-3 text-left">{q}</p>
                <div className="options-row">
                  {options.map((opt) => (
                    <button
                      key={opt.value}
                      type="button"
                      className={`option-btn ${answers[i] === opt.value ? "selected" : ""}`}
                      onClick={() => handleAnswer(i, opt.value)}
                    >
                      {opt.label}
                    </button>
                  ))}
                </div>
              </div>
            ))}
          </form>

          <button
            type="button"
            onClick={calculateScore}
            disabled={loading}
            className="calculate-row"
          >
            {loading ? "Guardando..." : "Calcular"}
          </button>
        </>
      )}

      <br />
      <Footer />
    </div>
  );
}
